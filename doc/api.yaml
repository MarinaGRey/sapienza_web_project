openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 0.0.1
  
tags:
  - name: "login"
    description: Endpoint that manages the login
  - name: "user"
    description: Endpoint that manages users
  - name: "ban"
    description: Endpoint that manages banned users
  - name: "followers"
    description: Endpoint that manages followers
  - name: "stream"
    description: Endpoint that manages stream
  - name: "photos"
    description: Endpoint that manages photos
  - name: "comments"
    description: Endpoint that manages comments
  - name: "likes"
    description: Endpoint that manages likes

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserName"
        required: true
        
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              
  /users/{UserId}:
    parameters:
      - $ref: "#/components/parameters/UserId"

    put:
      tags: ["user"]
      summary: "The user puts their username"
      description: |-
        The client can change the username of their profile
      operationId: setMyUserName
      requestBody:
        description: |- 
          The username the user wants to change their name to. Must be between 3 and 16 characters
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserName"
              
        required: true
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

      security:
          - BearerAuth: []
    
    get:
      tags: ["user"]
      summary: "The profile of the user is shown"
      description: |-
        The profile must have all the following attributes: the number of followers, the stream of photos, and on each photo, the comments and the number of likes
      operationId: getUserProfile
      responses:
        '200':
          $ref: "#/components/responses/Profile"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
                    
      security:
        - BearerAuth: []
  
  /users:
  
    get:
      tags: ["user"]
      summary: "The username of a user is searched"
      description: |-
        In order for the user to search and follow, the username is searched
      operationId: searchUsername
      responses:
        '200':
          $ref: "#/components/responses/Profile"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
                    
      security:
        - BearerAuth: []
    
                    
  /users/{UserId}/followers/{FollowUserId}:
    parameters:
      - $ref: "#/components/parameters/UserId"
      - $ref: "#/components/parameters/FollowUserId"

    put:
      tags: ["followers"]
      summary: "The user follows another user"
      description: |-
        The client follows another user, so the list that contains the followed users is updated and filled with the name of the new user
      operationId: followUser
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

      security:
        - BearerAuth: []

    delete:
      tags: ["followers"]
      summary: "The user unfollows another user"
      description: |-
        The client unfollows another user, so from the list that contains the names of the followed users the name of the user is deleted
      operationId: unfollowUser
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
        
      security:
        - BearerAuth: []
                    
  /users/{UserId}/banned/{BanUserId}:
    parameters:
      - $ref: "#/components/parameters/UserId"
      - $ref: '#/components/parameters/BanUserId'

    put:
      tags: ["ban"]
      summary: "The user bans another user"
      description: |-
        The client bans another user so the other person is not able to follow or see the profile of the user. The ban list of user is added with the name of the other user
      operationId: banUser
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
                  
      security:
        - BearerAuth: []

    delete:
      tags: ["ban"]
      summary: "The user unbans another user"
      description: |-
        The client unbans another user, so from the list that contains the names of the banned users the name of the user is deleted
      operationId: unbanUser
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
      
      security:
        - BearerAuth: []
                    
  /users/{UserId}/homescreen:
    parameters:
      - $ref: '#/components/parameters/UserId'
    get:
      tags: ["stream"]
      summary: "All the photos of the user are shown"
      description: |-
        The pictures the user has already uploaded should all appear. Also, with each one of them the number of likes it has received and the array of comments it has should appear
      operationId: getMyStream
      responses:
        '200':
          $ref: "#/components/responses/Stream"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

      security:
        - BearerAuth: []
    
  /users/{UserId}/photos:
    parameters:
      - $ref: '#/components/parameters/UserId'
    post:
      tags: ["photos"]
      summary: "The user uploads a photo to their profile"
      description: |-
        The client uploads a photo that will appear in their profile 
      operationId: uploadPhoto
      requestBody:
        description: photo
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
        required: true
      responses:
        '201':
          $ref: "#/components/responses/PhotoUploaded"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"

      security:
        - BearerAuth: []
        
  /users/{UserId}/photos/{PhotoId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/PhotoId'
    
    delete: 
      tags: ["photos"]
      summary: "The user deletes a photo of their profile, and all the associated comments"
      description: |-
        The user deletes a photo that must be in their profile, so both the photo and its associated comments should be deleted
        
      operationId: deletePhoto
        
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
                    
      security:
        - BearerAuth: []
    
    get:
      tags: ["photos"]
      summary: "gets a photo to make changes to it"
      description: |-
        The info of a photo is taken to interact with it
      
      operationId: getPhoto
        
      responses:
        '200':
          $ref: "#/components/schemas/Photo"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
        
  
  
  /users/{UserId}/photos/{PhotoId}/likes:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/PhotoId'

    post:
      tags: ["likes"]
      summary: "The user likes the photo of another user"
      description: |-
        The client likes the photo of another user, so the count of the likes increases in one and is associated to the user 
      operationId: likePhoto
 
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
                    
      security:
        - BearerAuth: []
  
  /users/{UserId}/photos/{PhotoId}/likes/{LikeId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/PhotoId'
      - $ref: '#/components/parameters/LikeId'
                
    delete:
      tags: ["likes"]
      summary: "The user unlikes the photo of another user"
      description: |-
        The client unlikes the photo of another user, so the count of the likes decreases in one, the name of the user is deleted from the likes of the photo
        
      operationId: unlikePhoto

      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
                    
      security:
        - BearerAuth: []
                    
  /users/{UserId}/photos/{PhotoId}/comments:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/PhotoId'

    post: 
      tags: ["comments"]
      summary: "The user comments the photo of another user"
      description: |-
        The client comments the photo of another user, so the photo should have the name of the user that comments and the comment
        
      operationId: commentPhoto
      requestBody:
        description: Comment that is going to be added
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentText"
        
      responses:
        '201':
          $ref: "#/components/responses/CommentPosted"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
                    
      security:
          - BearerAuth: []
  
  /users/{UserId}/photos/{PhotoId}/comments/{CommentId}:
    parameters:
      - $ref: '#/components/parameters/UserId'
      - $ref: '#/components/parameters/PhotoId'
      - $ref: '#/components/parameters/CommentId'

    delete: 
      tags: ["comments"]
      summary: "The user deletes a comment of the photo of another user"
      description: |-
        The client removes the comment of the photo of another user, so the comment should be deleted
        
      operationId: uncommentPhoto
        
      responses:
        '204':
          $ref: "#/components/responses/NoContent"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/ServerError"
                    
      security:
        - BearerAuth: []
                  
                    
components:

  parameters:
    
    UserId: 
      name: UserId
      in: path
      description: the user id, defined by a number (pk)
      required: true
      schema:
        description: it is an integer between 0-99999
        type: integer
        minimum: 0
        maximum: 99999
        example: 12345
        
    PhotoId:
      name: PhotoId
      in: path
      description: the photo id, defined by a number (pk)
      required: true
      schema:
        description: integer between 0-99999
        type: integer
        minimum: 0
        maximum: 99999
        example: 13673
    
    CommentId:
      name: CommentId
      in: path
      description: the comment id, defined by a number (pk)
      required: true
      schema:
        description: integer between 0-99999
        type: integer
        minimum: 0
        maximum: 99999
        example: 13748
    
    LikeId:
      name: LikeId
      in: path
      description: the like id, defined by a number (pk)
      required: true
      schema:
        description: integer between 0-99999
        type: integer
        minimum: 0
        maximum: 99999
        example: 64738
    
    FollowUserId:
      name: FollowUserId
      in: path
      description: the id of the user that is going to be followed/unfollowed
      required: true
      schema:
        description: it is an integer between 0-99999
        type: integer
        minimum: 0
        maximum: 99999
        example: 56745
        
    BanUserId:
      name: BanUserId
      in: path
      description: the id of the user that is going to be banned/unbanned
      required: true
      schema:
        description: it is an integer between 0-99999
        type: integer
        minimum: 0
        maximum: 99999
        example: 23412

  schemas:
  
    UserName:
      title: UserName
      description: the user's username
      type: object
      properties:
        UserName:
          description: the string that will be the username, between 3-16 characters
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          example: margrey
  
    User:
      title: User
      description:  The user id and their username
      type: object
      properties:
        UserID: 
          description: the user id, integer from 0-99999
          type: integer
          minimum: 0
          maximum: 99999
          example: 89898
        Username:
          $ref: "#/components/schemas/UserName"
    
    PhotoId:
      title: PhotoId
      description: the ID of the photo
      type: object
      properties:
        PhotoID: 
          description: the photo id
          type: integer
          minimum: 0
          maximum: 99999
          example: 7483

      
    Photo:
      title: Photo
      description: the photo schema, including the id, user, likes, date, comments
      type: object
      properties:
        PhotoID:
          $ref: "#/components/schemas/PhotoId"
        UserID:
          description: this is the user that uplodaded the photo id
          type: integer
          minimum: 0
          maximum: 99999
          example: 84938
        UserName:
          $ref: "#/components/schemas/UserName"
        File: 
          description: the file where the photos are stored
          type: string
          format: binary
          minLength: 1
          maxLength: 99999
        Date:
          description: the moment when the photo was uploaded (date and time)
          type: string
          format: date-time
          example: "2023-10-25T14:06:45Z"
          minLength: 3
          maxLength: 99999
        Likes:
          description: array of likes of the photo (users that liked it)
          type: array
          minItems: 0
          maxItems: 99999
          items: 
            $ref: "#/components/schemas/Like"
          example:
            - UserID: 64733
              UserName: margrey
            - UserID: 73829
              UserName: empan
        Comments:
          description: comments of the photo
          type: array
          minItems: 0
          maxItems: 99999
          items:
            $ref: "#/components/schemas/Comment"
          example: 
            - comments:
              - CommentID: 63745
                UserID: 64733
                UserName: margrey
                PhotoID: 78392
                Comment: "Nice picture"
                
    CommentText:
      title: CommentText
      type: object
      description: the conctent of the comment in a string
      properties:
        CommentText:
          description: the comment that the user posts content
          type: string
          pattern: '^.*?$'
          minLength: 1
          maxLength: 50
          example: That is so coollll
                
    Comment:
      title: Comment
      type: object
      description: schema of a comment, with the content of it, the user and the photo it belongs to
      properties:
        CommentID: 
          description: the comment id
          type: integer
          minimum: 0
          maximum: 99999
          example: 7383
        UserID:
          description: the user that posts the comment id
          type: integer
          minimum: 0
          maximum: 99999
          example: 78987
        UserName:
          $ref: "#/components/schemas/UserName"
        PhotoID:
          $ref: "#/components/schemas/PhotoId"
        CommentText:
          $ref: "#/components/schemas/CommentText"
      example:
        CommentID: 56746
        UserID: 74833
        UserName: margrey
        PhotoID: 83938
        Comment: That is so coollll
    
    Like:
      title: Like
      type: object
      description: a like, with its id, the photo and the person who likes
      properties:
        LikeID: 
          description: the like id
          type: integer
          minimum: 0
          maximum: 99999
          example: 647
        UserID:
          description: the user that likes the photo id
          type: integer
          minimum: 0
          maximum: 99999
          example: 637
        UserName:
          $ref: "#/components/schemas/UserName"
        PhotoID:
          $ref: "#/components/schemas/PhotoId"
      example:
        LikeID: 74848
        UserID: 839
        PhotoID: 83938
    
    Profile:
      description: contains all the info of a profile, followers, following, photos with all their info
      type: object
      properties:
        UserID:
          description: the user that posts the comment id
          type: integer
          minimum: 0
          maximum: 99999
          example: 78987
        UserName:
          $ref: "#/components/schemas/UserName"
        followers:
          description: the array of followers of the user
          type: array
          minItems: 0
          maxItems: 999
          items:
            $ref: "#/components/schemas/User"
          example:
            - UserID: 64733
              UserName: margrey
            - UserID: 73829
              UserName: empan
        following:
          description: the array of users the user follows
          type: array
          minItems: 0
          maxItems: 999
          items:
            $ref: "#/components/schemas/User"
          example:
            - UserID: 64733
              UserName: margrey
            - UserID: 73829
              UserName: empan
        Photos:
          description: the array of photos the user has posted
          type: array
          minItems: 0
          maxItems: 99
          items: 
            $ref: "#/components/schemas/Photo"
          example:
            - Comments:
                  - UserID: 8987
                    UserName: "empan"
                    CommentID: 637
                    Comment: "Nice picture"
                    
                  - user_id: 73829
                    nickname: "haruno"
                    CommentID: 7383
                    comment: "that is great"
                    
            - likes:
              - UserID: 8987
                UserName: "empan"
              - UserID: 73829
                UserName: "haruno"
                
              date: 2023-09-21T09:12:56Z
              PhotoID: 74839
              owner: "margrey"
  
    Stream:
      description: the stream that will appear in the home page of the user, with the most recent photos of the users they follow
      type: object
      properties:
        Photos:
          description: photos that will appear
          type: array
          minItems: 0
          maxItems: 20
          items:
            $ref: "#/components/schemas/Photo"
          example:
            - Comments:
              - UserID: 8987
                UserName: "empan"
                CommentID: 637
                Comment: "Nice picture"
                
              - user_id: 73829
                nickname: "haruno"
                CommentID: 7383
                comment: "that is great"
                
            - likes:
              - UserID: 8987
                UserName: "empan"
              - UserID: 73829
                UserName: "haruno"
                
              date: 2023-09-21T09:12:56Z
              PhotoID: 74839
              owner: "margrey"
              
            - Comments:
              - UserID: 74638
                UserName: "kujojo"
                CommentID: 737
                Comment: "wooooow"
                
              - user_id: 63732
                nickname: "swagging"
                CommentID: 738
                comment: "can't wait to see you"
                
            - likes:
              - UserID: 74638
                UserName: "kujojo"
                
              date: 2023-12-25T03:56:05
              PhotoID: 73829
              owner: "haruno"
  
  responses:
    NoContent:
      description: "The response for code 200, where there is no content"

    Stream:
      description: Contains a list of photos from following users in a reversed chronological order
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Stream"

    CommentPosted:
      description: 'The comment was added successfully so it is returned'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"

    PhotoUploaded:
      description: 'the photo was added successfully, so the photo is returned'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Photo"

    Profile:
      description: All the info of a profile
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Profile"
    
    Unauthorized:
      description: "Error 401 - Unauthorized - The user is not logged in"
    
    Forbidden:
      description: "Error 403 - Forbidden - That action cannot be executed"
    
    NotFound:
      description: "Error 404 - Not found"
      
    ServerError:
      description: "Error 500 - Internal server error occurred"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
        
          

    
